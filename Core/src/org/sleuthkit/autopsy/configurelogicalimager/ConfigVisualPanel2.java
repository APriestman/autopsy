/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.configurelogicalimager;

import java.util.ArrayList;
import static java.util.Collections.EMPTY_SET;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import org.openide.util.NbBundle;

public final class ConfigVisualPanel2 extends JPanel {

    private String configFilename;
    private LogicalImagerConfig config = null;
    private final JButton okButton = new JButton("OK");
    private final JButton cancelButton = new JButton("Cancel");

    /**
     * Creates new form ConfigVisualPanel2
     */
    public ConfigVisualPanel2() {
        initComponents();
        if (config != null) {
            updatePanel(configFilename, config);
        }
    }

    @Override
    public String getName() {
        return "Edit configuration";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        equalitySignComboBox = new javax.swing.JComboBox<String>();
        fileSizeSpinner1 = new javax.swing.JSpinner();
        fileSizeUnitComboBox1 = new javax.swing.JComboBox<String>();
        modifiedDateLabel = new javax.swing.JLabel();
        daysIncludedTextField = new javax.swing.JTextField();
        daysIncludedLabel = new javax.swing.JLabel();
        fullPathsLabel = new javax.swing.JLabel();
        flagEncryptionProgramsCheckBox = new javax.swing.JCheckBox();
        ruleNameLabel = new javax.swing.JLabel();
        ruleNameEditTextField = new javax.swing.JTextField();
        newRuleButton = new javax.swing.JButton();
        descriptionLabel = new javax.swing.JLabel();
        editRuleButton = new javax.swing.JButton();
        descriptionEditTextField = new javax.swing.JTextField();
        deleteRuleButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        fullPathsTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        filenamesTable = new javax.swing.JTable();
        shouldSaveCheckBox = new javax.swing.JCheckBox();
        shouldAlertCheckBox = new javax.swing.JCheckBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        folderNamesTable = new javax.swing.JTable();
        extensionsLabel = new javax.swing.JLabel();
        extensionsTextField = new javax.swing.JTextField();
        filenamesLabel = new javax.swing.JLabel();
        configFileTextField = new javax.swing.JTextField();
        ruleSetFileLabel = new javax.swing.JLabel();
        finalizeImageWriter = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        rulesTable = new javax.swing.JTable();
        folderNamesLabel = new javax.swing.JLabel();
        fileSizeLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        equalitySignComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "=", ">", "≥", "<", "≤" }));

        fileSizeSpinner1.setEnabled(false);
        fileSizeSpinner1.setMinimumSize(new java.awt.Dimension(2, 20));

        fileSizeUnitComboBox1.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { Bundle.FilesSetDefsPanel_bytes(), Bundle.FilesSetDefsPanel_kiloBytes(), Bundle.FilesSetDefsPanel_megaBytes(), Bundle.FilesSetDefsPanel_gigaBytes() }));

        org.openide.awt.Mnemonics.setLocalizedText(modifiedDateLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.modifiedDateLabel.text")); // NOI18N

        daysIncludedTextField.setEditable(false);
        daysIncludedTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        daysIncludedTextField.setText(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.daysIncludedTextField.text")); // NOI18N
        daysIncludedTextField.setEnabled(false);
        daysIncludedTextField.setMinimumSize(new java.awt.Dimension(60, 20));
        daysIncludedTextField.setPreferredSize(new java.awt.Dimension(60, 20));

        org.openide.awt.Mnemonics.setLocalizedText(daysIncludedLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.daysIncludedLabel.text")); // NOI18N
        daysIncludedLabel.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(fullPathsLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.fullPathsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(flagEncryptionProgramsCheckBox, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.flagEncryptionProgramsCheckBox.text")); // NOI18N
        flagEncryptionProgramsCheckBox.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(ruleNameLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.ruleNameLabel.text")); // NOI18N

        ruleNameEditTextField.setText(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.ruleNameEditTextField.text")); // NOI18N
        ruleNameEditTextField.setEnabled(false);

        newRuleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/add16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(newRuleButton, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.newRuleButton.text")); // NOI18N
        newRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRuleButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(descriptionLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.descriptionLabel.text")); // NOI18N

        editRuleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/edit16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(editRuleButton, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.editRuleButton.text")); // NOI18N
        editRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRuleButtonActionPerformed(evt);
            }
        });

        descriptionEditTextField.setText(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.descriptionEditTextField.text")); // NOI18N
        descriptionEditTextField.setEnabled(false);
        descriptionEditTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionEditTextFieldActionPerformed(evt);
            }
        });

        deleteRuleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/delete16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteRuleButton, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.deleteRuleButton.text")); // NOI18N
        deleteRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRuleButtonActionPerformed(evt);
            }
        });

        fullPathsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        fullPathsTable.setColumnSelectionAllowed(true);
        fullPathsTable.setEnabled(false);
        fullPathsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fullPathsTable.setShowHorizontalLines(false);
        fullPathsTable.setShowVerticalLines(false);
        fullPathsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(fullPathsTable);

        filenamesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        filenamesTable.setEnabled(false);
        filenamesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        filenamesTable.setShowHorizontalLines(false);
        filenamesTable.setShowVerticalLines(false);
        filenamesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(filenamesTable);
        if (filenamesTable.getColumnModel().getColumnCount() > 0) {
            filenamesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.filenamesTable.columnModel.title0")); // NOI18N
        }

        shouldSaveCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(shouldSaveCheckBox, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.shouldSaveCheckBox.text")); // NOI18N
        shouldSaveCheckBox.setEnabled(false);

        shouldAlertCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(shouldAlertCheckBox, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.shouldAlertCheckBox.text")); // NOI18N
        shouldAlertCheckBox.setEnabled(false);

        folderNamesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        folderNamesTable.setEnabled(false);
        folderNamesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        folderNamesTable.setShowHorizontalLines(false);
        folderNamesTable.setShowVerticalLines(false);
        folderNamesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(folderNamesTable);

        org.openide.awt.Mnemonics.setLocalizedText(extensionsLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.extensionsLabel.text")); // NOI18N

        extensionsTextField.setText(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.extensionsTextField.text")); // NOI18N
        extensionsTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(filenamesLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.filenamesLabel.text")); // NOI18N

        configFileTextField.setText(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.configFileTextField.text")); // NOI18N
        configFileTextField.setToolTipText(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.configFileTextField.toolTipText")); // NOI18N
        configFileTextField.setEnabled(false);
        configFileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configFileTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ruleSetFileLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.ruleSetFileLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(finalizeImageWriter, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.finalizeImageWriter.text")); // NOI18N
        finalizeImageWriter.setEnabled(false);
        finalizeImageWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizeImageWriterActionPerformed(evt);
            }
        });

        rulesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rule name", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rulesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        rulesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        rulesTable.setShowHorizontalLines(false);
        rulesTable.setShowVerticalLines(false);
        rulesTable.getTableHeader().setReorderingAllowed(false);
        rulesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rulesTableMouseClicked(evt);
            }
        });
        rulesTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rulesTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(rulesTable);
        if (rulesTable.getColumnModel().getColumnCount() > 0) {
            rulesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.rulesTable.columnModel.title0")); // NOI18N
            rulesTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.rulesTable.columnModel.title1")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(folderNamesLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.folderNamesLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileSizeLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.fileSizeLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(folderNamesLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(10, 10, 10)
                                                    .addComponent(extensionsLabel))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(ruleNameLabel)
                                                    .addComponent(descriptionLabel)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(filenamesLabel))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(fullPathsLabel))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(343, 343, 343)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fileSizeLabel)
                                    .addComponent(modifiedDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(extensionsTextField)
                                    .addComponent(descriptionEditTextField)
                                    .addComponent(ruleNameEditTextField)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(daysIncludedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(daysIncludedLabel))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(equalitySignComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fileSizeSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fileSizeUnitComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(finalizeImageWriter))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(flagEncryptionProgramsCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(shouldSaveCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(shouldAlertCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(newRuleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editRuleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteRuleButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(ruleSetFileLabel)
                        .addGap(18, 18, 18)
                        .addComponent(configFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ruleSetFileLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newRuleButton)
                            .addComponent(editRuleButton)
                            .addComponent(deleteRuleButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(descriptionEditTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(descriptionLabel)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ruleNameLabel)
                                .addComponent(ruleNameEditTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(extensionsLabel)
                            .addComponent(extensionsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filenamesLabel))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(folderNamesLabel)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fullPathsLabel)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fileSizeSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(fileSizeUnitComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(equalitySignComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(fileSizeLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(modifiedDateLabel)
                                    .addComponent(daysIncludedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(daysIncludedLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(shouldAlertCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(shouldSaveCheckBox)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(flagEncryptionProgramsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finalizeImageWriter)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void descriptionEditTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionEditTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionEditTextFieldActionPerformed

    private void configFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configFileTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_configFileTextFieldActionPerformed

    private void finalizeImageWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizeImageWriterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finalizeImageWriterActionPerformed

    private void rulesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rulesTableMouseClicked
        rulesTableSelect();
    }//GEN-LAST:event_rulesTableMouseClicked

    private void rulesTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rulesTableKeyReleased
        rulesTableSelect();
    }//GEN-LAST:event_rulesTableKeyReleased

    private void editRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRuleButtonActionPerformed
        int row = rulesTable.getSelectedRow();
        if (row != -1) {
            String ruleName = (String) rulesTable.getModel().getValueAt(row, 0);
            LogicalImagerRule rule = config.getRuleSet().get(ruleName);
            EditRulePanel editPanel = new EditRulePanel(okButton, cancelButton, ruleName, rule);
            editPanel.setEnabled(true);
            editPanel.setVisible(true);

            int option = JOptionPane.OK_OPTION;
            option = JOptionPane.showOptionDialog(this, editPanel.getPanel(), "Edit rule", 
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, 
                        null, new Object[]{okButton, cancelButton}, okButton);
            
            System.out.println("option = " + option);
            
            if (option == JOptionPane.OK_OPTION) {
                ;
            }
        }   
    }//GEN-LAST:event_editRuleButtonActionPerformed

    private void newRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRuleButtonActionPerformed
        int option = JOptionPane.showOptionDialog(this, "Creating a full paths rule?", "New rule", 
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

        JPanel panel;

        if (option == JOptionPane.YES_OPTION) {
            panel = EditRulePanel.NewFullPathsRulePanel(okButton, cancelButton);
        } else if (option == JOptionPane.NO_OPTION) {
            panel = EditRulePanel.NewNonFullPathsRulePanel(okButton, cancelButton);
        } else {
            return;
        }
        
        panel.setEnabled(true);
        panel.setVisible(true);
        option = JOptionPane.showOptionDialog(this, panel, "Edit rule", 
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, 
                    null, new Object[]{okButton, cancelButton}, okButton);

        System.out.println("option = " + option);

        if (option == JOptionPane.OK_OPTION) {
            ;
        }        
    }//GEN-LAST:event_newRuleButtonActionPerformed

    private void deleteRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRuleButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteRuleButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField configFileTextField;
    private javax.swing.JLabel daysIncludedLabel;
    private javax.swing.JTextField daysIncludedTextField;
    private javax.swing.JButton deleteRuleButton;
    private javax.swing.JTextField descriptionEditTextField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton editRuleButton;
    private javax.swing.JComboBox<String> equalitySignComboBox;
    private javax.swing.JLabel extensionsLabel;
    private javax.swing.JTextField extensionsTextField;
    private javax.swing.JLabel fileSizeLabel;
    private javax.swing.JSpinner fileSizeSpinner1;
    private javax.swing.JComboBox<String> fileSizeUnitComboBox1;
    private javax.swing.JLabel filenamesLabel;
    private javax.swing.JTable filenamesTable;
    private javax.swing.JCheckBox finalizeImageWriter;
    private javax.swing.JCheckBox flagEncryptionProgramsCheckBox;
    private javax.swing.JLabel folderNamesLabel;
    private javax.swing.JTable folderNamesTable;
    private javax.swing.JLabel fullPathsLabel;
    private javax.swing.JTable fullPathsTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel modifiedDateLabel;
    private javax.swing.JButton newRuleButton;
    private javax.swing.JTextField ruleNameEditTextField;
    private javax.swing.JLabel ruleNameLabel;
    private javax.swing.JLabel ruleSetFileLabel;
    private javax.swing.JTable rulesTable;
    private javax.swing.JCheckBox shouldAlertCheckBox;
    private javax.swing.JCheckBox shouldSaveCheckBox;
    // End of variables declaration//GEN-END:variables

    private void updatePanel(String configFilePath, LogicalImagerConfig config) {
        configFileTextField.setText(configFilePath);
        finalizeImageWriter.setSelected(config.isFinalizeImageWriter());
        Map<String, LogicalImagerRule> ruleSet = config.getRuleSet();
        RulesTableModel rulesTableModel = new RulesTableModel();
        int row = 0;
        for (Map.Entry<String, LogicalImagerRule> rule : ruleSet.entrySet()) {
            rulesTableModel.setValueAt(rule.getKey(), row, 0);
            rulesTableModel.setValueAt(rule.getValue().getDescription(), row, 1);
            row++;
        }
        rulesTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        rulesTable.setModel(rulesTableModel);
        // If there are any rules, select the first one
        if (rulesTableModel.getRowCount() > 0) {
            rulesTable.setRowSelectionInterval(0, 0);
            rulesTableSelect();
        }
    }

    private void rulesTableSelect() {
        int index = rulesTable.getSelectedRow();
        if (index != -1) {
            String ruleName = (String) rulesTable.getModel().getValueAt(index, 0);
            String description = (String) rulesTable.getModel().getValueAt(index, 1);
            updateRuleDetails(ruleName, description, config);
        }
    }

    private void updateRuleDetails(String ruleName, String description, LogicalImagerConfig config) {
        clearRuleDetails();
        LogicalImagerRule rule = config.getRuleSet().get(ruleName);
        shouldAlertCheckBox.setSelected(rule.isShouldAlert());
        shouldSaveCheckBox.setSelected(rule.isShouldSave());
        ruleNameEditTextField.setText(ruleName);
        descriptionEditTextField.setText(description);
        updateExtensions(rule.getExtensions());
        updateList(filenamesTable, rule.getFilenames());
        updateList(folderNamesTable, rule.getPaths());
        updateList(fullPathsTable, rule.getFullPaths());
        fileSizeSpinner1.setValue(rule.getMaxFileSize());
        daysIncludedTextField.setText(Integer.toString(rule.getMinDays()));
    }

    private void clearRuleDetails() {
        extensionsTextField.setText("");
        shouldAlertCheckBox.setSelected(false);
        shouldSaveCheckBox.setSelected(false);
    }

    private void updateExtensions(Set<String> extensions) {
        extensionsTextField.setText("");
        String content = "";
        boolean first = true;
        for (String ext : extensions) {            
            content += (first ? "" : ",") + ext;
            first = false;
        }
        extensionsTextField.setText(content);
    }

    private void updateList(javax.swing.JTable jTable, Set<String> set) {
        SingleColumnTableModel tableModel = new SingleColumnTableModel();
        int row = 0;
        for (String s : set) {
            tableModel.setValueAt(s, row, 0);
            row++;
        }
        jTable.setTableHeader(null);
        jTable.setModel(tableModel);
    }

    void setConfiguration(String configFilename, LogicalImagerConfig config, boolean newFile) {
        this.configFilename = configFilename;
        this.config = config;
        if (newFile) {
            initPanel();
        } else {
            updatePanel(configFilename, config);
        }
    }

    private void initPanel() {
        configFileTextField.setText("");
        rulesTable.setModel(new RulesTableModel());
        shouldAlertCheckBox.setSelected(true);
        shouldSaveCheckBox.setSelected(false);
        ruleNameEditTextField.setText("");
        descriptionEditTextField.setText("");
        extensionsTextField.setText("");
        updateList(filenamesTable, EMPTY_SET);
        updateList(folderNamesTable, EMPTY_SET);
        fileSizeSpinner1.setValue(0);
        daysIncludedTextField.setText(Integer.toString(0));
    }
    
    private class RulesTableModel extends AbstractTableModel {

        private final List<String> ruleName = new ArrayList<>();
        private final List<String> ruleDescription = new ArrayList<>();

        @Override
        public int getRowCount() {
            return ruleName.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @NbBundle.Messages({
            "ConfigVisualPanel2.rulesTable.columnModel.title0=Rule name",
            "ConfigVisualPanel2.rulesTable.columnModel.title1=Description"
        })
        @Override
        public String getColumnName(int column) {
            String colName = null;
            switch (column) {
                case 0:
                    colName = Bundle.ConfigVisualPanel2_rulesTable_columnModel_title0();
                    break;
                case 1:
                    colName = Bundle.ConfigVisualPanel2_rulesTable_columnModel_title1();
                    break;
                default:
                    break;
            }
            return colName;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Object ret = null;
            switch (columnIndex) {
                case 0:
                    ret = ruleName.get(rowIndex);
                    break;
                case 1:
                    ret = ruleDescription.get(rowIndex);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
            return ret;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    ruleName.add((String) aValue);
                    break;
                case 1:
                    ruleDescription.add((String) aValue);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
            // Only show the hostname and extractDates column
            if (columnIndex < 2) {
                super.setValueAt(aValue, rowIndex, columnIndex);
            }
        }
    }

    private class SingleColumnTableModel extends AbstractTableModel {

        private final List<String> list = new ArrayList<>();

        @Override
        public int getRowCount() {
            return list.size();
        }

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public String getColumnName(int column) {
            return "";
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Object ret = null;
            switch (columnIndex) {
                case 0:
                    ret = list.get(rowIndex);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
            return ret;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    list.add((String) aValue);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
        }
    }
}
