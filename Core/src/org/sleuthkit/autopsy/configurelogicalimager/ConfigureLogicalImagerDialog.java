/*
 * Autopsy Forensic Browser
 *
 * Copyright 2011-2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.configurelogicalimager;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;

/**
 * Dialog for creating, editing and saving configuration for Logical Imager.
 */
public class ConfigureLogicalImagerDialog extends javax.swing.JDialog {

    private LogicalImagerConfig config;
    
    @Messages({
        "FilesSetDefsPanel.bytes=Bytes",
        "FilesSetDefsPanel.kiloBytes=Kilobytes",
        "FilesSetDefsPanel.megaBytes=Megabytes",
        "FilesSetDefsPanel.gigaBytes=Gigabytes",
    })
    /**
     * Creates new form ConfigureLogicalImagerDialog
     */
    public ConfigureLogicalImagerDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileSizeSpinner = new javax.swing.JSpinner();
        fileSizeUnitComboBox = new javax.swing.JComboBox<String>();
        newButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        configFile = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        finalizeImageWriter = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        rulesTable = new javax.swing.JTable();
        newRuleButton = new javax.swing.JButton();
        editRuleButton = new javax.swing.JButton();
        deleteRuleButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        shouldSaveCheckBox = new javax.swing.JCheckBox();
        shouldAlertCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        extensionsTextField = new javax.swing.JTextField();
        filenamesLabel = new javax.swing.JLabel();
        folderNamesLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        equalitySignComboBox = new javax.swing.JComboBox<String>();
        fileSizeSpinner1 = new javax.swing.JSpinner();
        fileSizeUnitComboBox1 = new javax.swing.JComboBox<String>();
        modifiedDateLabel = new javax.swing.JLabel();
        daysIncludedTextField = new javax.swing.JTextField();
        daysIncludedLabel = new javax.swing.JLabel();
        fullPathsLabel = new javax.swing.JLabel();
        flagEncryptionProgramsCheckBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        ruleNameEditTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        descriptionEditTextField = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        fullPathsTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        filenamesTable = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        folderNamesTable = new javax.swing.JTable();

        fileSizeSpinner.setEnabled(false);
        fileSizeSpinner.setMinimumSize(new java.awt.Dimension(2, 20));

        fileSizeUnitComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { Bundle.FilesSetDefsPanel_bytes(), Bundle.FilesSetDefsPanel_kiloBytes(), Bundle.FilesSetDefsPanel_megaBytes(), Bundle.FilesSetDefsPanel_gigaBytes() }));
        fileSizeUnitComboBox.setEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.title")); // NOI18N
        setIconImage(null);

        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/add16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(newButton, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.newButton.text")); // NOI18N
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/Folder-icon.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(loadButton, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.loadButton.text")); // NOI18N
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/save16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.saveButton.text")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        configFile.setText(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.configFile.text")); // NOI18N
        configFile.setToolTipText(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.configFile.toolTipText")); // NOI18N
        configFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configFileActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(finalizeImageWriter, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.finalizeImageWriter.text")); // NOI18N
        finalizeImageWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizeImageWriterActionPerformed(evt);
            }
        });

        rulesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Rule-name", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        rulesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        rulesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        rulesTable.setShowHorizontalLines(false);
        rulesTable.setShowVerticalLines(false);
        rulesTable.getTableHeader().setReorderingAllowed(false);
        rulesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rulesTableMouseClicked(evt);
            }
        });
        rulesTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rulesTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(rulesTable);
        if (rulesTable.getColumnModel().getColumnCount() > 0) {
            rulesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.rulesTable.columnModel.title0")); // NOI18N
            rulesTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.rulesTable.columnModel.title1")); // NOI18N
        }

        newRuleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/add16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(newRuleButton, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.newRuleButton.text")); // NOI18N

        editRuleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/edit16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(editRuleButton, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.editRuleButton.text")); // NOI18N

        deleteRuleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/delete16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteRuleButton, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.deleteRuleButton.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.jLabel2.text")); // NOI18N

        shouldSaveCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(shouldSaveCheckBox, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.shouldSaveCheckBox.text")); // NOI18N

        shouldAlertCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(shouldAlertCheckBox, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.shouldAlertCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.jLabel3.text")); // NOI18N

        extensionsTextField.setText(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.extensionsTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(filenamesLabel, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.filenamesLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(folderNamesLabel, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.folderNamesLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.jLabel4.text")); // NOI18N

        equalitySignComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "=", ">", "≥", "<", "≤" }));
        equalitySignComboBox.setEnabled(false);

        fileSizeSpinner1.setEnabled(false);
        fileSizeSpinner1.setMinimumSize(new java.awt.Dimension(2, 20));

        fileSizeUnitComboBox1.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { Bundle.FilesSetDefsPanel_bytes(), Bundle.FilesSetDefsPanel_kiloBytes(), Bundle.FilesSetDefsPanel_megaBytes(), Bundle.FilesSetDefsPanel_gigaBytes() }));
        fileSizeUnitComboBox1.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(modifiedDateLabel, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.modifiedDateLabel.text")); // NOI18N

        daysIncludedTextField.setEditable(false);
        daysIncludedTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        daysIncludedTextField.setText(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.daysIncludedTextField.text")); // NOI18N
        daysIncludedTextField.setMinimumSize(new java.awt.Dimension(60, 20));
        daysIncludedTextField.setPreferredSize(new java.awt.Dimension(60, 20));

        org.openide.awt.Mnemonics.setLocalizedText(daysIncludedLabel, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.daysIncludedLabel.text")); // NOI18N
        daysIncludedLabel.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(fullPathsLabel, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.fullPathsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(flagEncryptionProgramsCheckBox, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.flagEncryptionProgramsCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.jLabel5.text")); // NOI18N

        ruleNameEditTextField.setText(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.ruleNameEditTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.jLabel6.text")); // NOI18N

        descriptionEditTextField.setText(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.descriptionEditTextField.text")); // NOI18N
        descriptionEditTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionEditTextFieldActionPerformed(evt);
            }
        });

        fullPathsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        fullPathsTable.setColumnSelectionAllowed(true);
        fullPathsTable.setShowHorizontalLines(false);
        fullPathsTable.setShowVerticalLines(false);
        fullPathsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(fullPathsTable);
        fullPathsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (fullPathsTable.getColumnModel().getColumnCount() > 0) {
            fullPathsTable.getColumnModel().getColumn(0).setResizable(false);
            fullPathsTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.fullPathsTable.columnModel.title0")); // NOI18N
        }

        filenamesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        filenamesTable.setShowHorizontalLines(false);
        filenamesTable.setShowVerticalLines(false);
        filenamesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(filenamesTable);
        filenamesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (filenamesTable.getColumnModel().getColumnCount() > 0) {
            filenamesTable.getColumnModel().getColumn(0).setResizable(false);
            filenamesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.fullPathsTable.columnModel.title0")); // NOI18N
        }

        folderNamesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        folderNamesTable.setShowHorizontalLines(false);
        folderNamesTable.setShowVerticalLines(false);
        folderNamesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(folderNamesTable);
        folderNamesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (folderNamesTable.getColumnModel().getColumnCount() > 0) {
            folderNamesTable.getColumnModel().getColumn(0).setResizable(false);
            folderNamesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigureLogicalImagerDialog.class, "ConfigureLogicalImagerDialog.fullPathsTable.columnModel.title0")); // NOI18N
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(newButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(configFile)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(finalizeImageWriter)
                                .addGap(31, 31, 31)
                                .addComponent(flagEncryptionProgramsCheckBox))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(newRuleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editRuleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteRuleButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ruleNameEditTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(descriptionEditTextField)))))
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(filenamesLabel)
                    .addComponent(folderNamesLabel)
                    .addComponent(jLabel4)
                    .addComponent(fullPathsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modifiedDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(equalitySignComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileSizeSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileSizeUnitComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(377, 377, 377))
                            .addComponent(extensionsTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(daysIncludedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(daysIncludedLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(shouldSaveCheckBox)
                                .addGap(47, 47, 47)
                                .addComponent(shouldAlertCheckBox)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton)
                    .addComponent(loadButton)
                    .addComponent(saveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finalizeImageWriter)
                    .addComponent(flagEncryptionProgramsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newRuleButton)
                    .addComponent(editRuleButton)
                    .addComponent(deleteRuleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(ruleNameEditTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(descriptionEditTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shouldSaveCheckBox)
                    .addComponent(shouldAlertCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(extensionsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filenamesLabel)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(folderNamesLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fullPathsLabel)
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(equalitySignComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileSizeSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileSizeUnitComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifiedDateLabel)
                    .addComponent(daysIncludedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(daysIncludedLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select a Logical Image configuration json file");
        fileChooser.setDragEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter = new FileNameExtensionFilter("configuration json file", new String[] {"json"});
        fileChooser.setFileFilter(filter);
        fileChooser.setMultiSelectionEnabled(false);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getPath();
            System.out.println("Selected " + path);
            try {
                loadConfigFile(path);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveButtonActionPerformed

    private void configFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_configFileActionPerformed

    private void finalizeImageWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizeImageWriterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finalizeImageWriterActionPerformed

    private void rulesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rulesTableMouseClicked
        rulesTableSelect();
    }//GEN-LAST:event_rulesTableMouseClicked

    private void rulesTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rulesTableKeyReleased
        rulesTableSelect();
    }//GEN-LAST:event_rulesTableKeyReleased

    private void descriptionEditTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionEditTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionEditTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfigureLogicalImagerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfigureLogicalImagerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfigureLogicalImagerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfigureLogicalImagerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConfigureLogicalImagerDialog dialog = new ConfigureLogicalImagerDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField configFile;
    private javax.swing.JLabel daysIncludedLabel;
    private javax.swing.JTextField daysIncludedTextField;
    private javax.swing.JButton deleteRuleButton;
    private javax.swing.JTextField descriptionEditTextField;
    private javax.swing.JButton editRuleButton;
    private javax.swing.JComboBox<String> equalitySignComboBox;
    private javax.swing.JTextField extensionsTextField;
    private javax.swing.JSpinner fileSizeSpinner;
    private javax.swing.JSpinner fileSizeSpinner1;
    private javax.swing.JComboBox<String> fileSizeUnitComboBox;
    private javax.swing.JComboBox<String> fileSizeUnitComboBox1;
    private javax.swing.JLabel filenamesLabel;
    private javax.swing.JTable filenamesTable;
    private javax.swing.JCheckBox finalizeImageWriter;
    private javax.swing.JCheckBox flagEncryptionProgramsCheckBox;
    private javax.swing.JLabel folderNamesLabel;
    private javax.swing.JTable folderNamesTable;
    private javax.swing.JLabel fullPathsLabel;
    private javax.swing.JTable fullPathsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel modifiedDateLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JButton newRuleButton;
    private javax.swing.JTextField ruleNameEditTextField;
    private javax.swing.JTable rulesTable;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox shouldAlertCheckBox;
    private javax.swing.JCheckBox shouldSaveCheckBox;
    // End of variables declaration//GEN-END:variables

    private void loadConfigFile(String path) throws FileNotFoundException {
        FileInputStream is = new FileInputStream(path);
        InputStreamReader reader = new InputStreamReader(is, StandardCharsets.UTF_8);
        GsonBuilder gsonBuilder = new GsonBuilder().setPrettyPrinting();
        gsonBuilder.registerTypeAdapter(LogicalImagerConfig.class, new LogicalImagerConfigDeserializer());
        Gson gson = gsonBuilder.create();
        try {
            config = gson.fromJson(reader, LogicalImagerConfig.class);
            //System.out.println(gson.toJson(config));
            updatePanel(path, config);
        } catch (JsonParseException e) {
            System.err.println("Error parsing " + path + ". Reason= " + e.getMessage());
        }
    }

    private void updatePanel(String configFilePath, LogicalImagerConfig config) {
        configFile.setText(configFilePath);
        finalizeImageWriter.setSelected(config.isFinalizeImageWriter());
        Map<String, LogicalImagerRule> ruleSet = config.getRuleSet();
        RulesTableModel rulesTableModel = new RulesTableModel();
        int row = 0;
        for (Entry<String, LogicalImagerRule> rule : ruleSet.entrySet()) {
            rulesTableModel.setValueAt(rule.getKey(), row, 0);
            rulesTableModel.setValueAt(rule.getValue().getDescription(), row, 1);
            row++;
        }
        rulesTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        rulesTable.setModel(rulesTableModel);
    }

    private void rulesTableSelect() {
        int index = rulesTable.getSelectedRow();
        if (index != -1) {
            String ruleName = (String) rulesTable.getModel().getValueAt(index, 0);
            String description = (String) rulesTable.getModel().getValueAt(index, 1);
            updateRuleDetails(ruleName, description, config);
        }
    }

    private void updateRuleDetails(String ruleName, String description, LogicalImagerConfig config) {
        clearRuleDetails();
        LogicalImagerRule rule = config.getRuleSet().get(ruleName);
        shouldAlertCheckBox.setSelected(rule.isShouldAlert());
        shouldSaveCheckBox.setSelected(rule.isShouldSave());
        ruleNameEditTextField.setText(ruleName);
        descriptionEditTextField.setText(description);
        updateExtensions(rule.getExtensions());
        updateList(filenamesTable, rule.getFilenames());
        updateList(folderNamesTable, rule.getPaths());
    }

    private void clearRuleDetails() {
        extensionsTextField.setText("");
        shouldAlertCheckBox.setSelected(false);
        shouldSaveCheckBox.setSelected(false);
    }

    private void updateExtensions(Set<String> extensions) {
        extensionsTextField.setText("");
        String content = "";
        boolean first = true;
        for (String ext : extensions) {            
            content += (first ? "" : ",") + ext;
            first = false;
        }
        extensionsTextField.setText(content);
    }

    private void updateList(javax.swing.JTable jTable, Set<String> set) {
        SingleColumnTableModel tableModel = new SingleColumnTableModel();
        int row = 0;
        for (String s : set) {
            tableModel.setValueAt(s, row, 0);
            row++;
        }
        jTable.setModel(tableModel);
    }
    
    private class RulesTableModel extends AbstractTableModel {

        private final List<String> ruleName = new ArrayList<>();
        private final List<String> ruleDescription = new ArrayList<>();

        @Override
        public int getRowCount() {
            return ruleName.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Messages({
            "ConfigureLogicalImagerDialog.rulesTable.columnModel.title0=Rule name",
            "ConfigureLogicalImagerDialog.rulesTable.columnModel.title1=Description"
        })
        @Override
        public String getColumnName(int column) {
            String colName = null;
            switch (column) {
                case 0:
                    colName = Bundle.ConfigureLogicalImagerDialog_rulesTable_columnModel_title0();
                    break;
                case 1:
                    colName = Bundle.ConfigureLogicalImagerDialog_rulesTable_columnModel_title1();
                    break;
                default:
                    break;
            }
            return colName;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Object ret = null;
            switch (columnIndex) {
                case 0:
                    ret = ruleName.get(rowIndex);
                    break;
                case 1:
                    ret = ruleDescription.get(rowIndex);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
            return ret;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    ruleName.add((String) aValue);
                    break;
                case 1:
                    ruleDescription.add((String) aValue);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
            // Only show the hostname and extractDates column
            if (columnIndex < 2) {
                super.setValueAt(aValue, rowIndex, columnIndex);
            }
        }
    }

    private class SingleColumnTableModel extends AbstractTableModel {

        private final List<String> list = new ArrayList<>();

        @Override
        public int getRowCount() {
            return list.size();
        }

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public String getColumnName(int column) {
            return "";
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Object ret = null;
            switch (columnIndex) {
                case 0:
                    ret = list.get(rowIndex);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
            return ret;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    list.add((String) aValue);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
        }
    }
}
