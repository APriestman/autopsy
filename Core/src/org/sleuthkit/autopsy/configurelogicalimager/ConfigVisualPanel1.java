/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.configurelogicalimager;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.Exceptions;

public final class ConfigVisualPanel1 extends JPanel implements DocumentListener {

    private LogicalImagerConfig config;
    private String configFilename;
    private boolean newFile = true;

    /**
     * Creates new form ConfigVisualPanel1
     */
    public ConfigVisualPanel1() {
        initComponents();
        configFileTextField.getDocument().addDocumentListener(new MyDocumentListener(this));
    }

    @Override
    public String getName() {
        return "Select configuration file";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        newRadioButton = new javax.swing.JRadioButton();
        loadRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        configFileTextField = new javax.swing.JTextField();

        buttonGroup1.add(newRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(newRadioButton, org.openide.util.NbBundle.getMessage(ConfigVisualPanel1.class, "ConfigVisualPanel1.newRadioButton.text_1")); // NOI18N
        newRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(loadRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(loadRadioButton, org.openide.util.NbBundle.getMessage(ConfigVisualPanel1.class, "ConfigVisualPanel1.loadRadioButton.text_1")); // NOI18N
        loadRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ConfigVisualPanel1.class, "ConfigVisualPanel1.jLabel1.text_1")); // NOI18N

        configFileTextField.setEditable(false);
        configFileTextField.setText(org.openide.util.NbBundle.getMessage(ConfigVisualPanel1.class, "ConfigVisualPanel1.configFileTextField.text_1")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadRadioButton)
                            .addComponent(newRadioButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(configFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(newRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadRadioButton)
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRadioButtonActionPerformed
        newFile = true;
        configFilename = null;
        configFileTextField.setText(" ");
    }//GEN-LAST:event_newRadioButtonActionPerformed

    private void loadRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadRadioButtonActionPerformed
         chooseFile("Select a Logical Imager configuration json file");
    }//GEN-LAST:event_loadRadioButtonActionPerformed

    private void chooseFile(String title) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(title);
        fileChooser.setDragEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter = new FileNameExtensionFilter("configuration json file", new String[] {"json"});
        fileChooser.setFileFilter(filter);
        fileChooser.setMultiSelectionEnabled(false);
        while (true) {
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                String path = fileChooser.getSelectedFile().getPath();
                if (new File(path).exists()) {
                    try {
                        loadConfigFile(path);
                        configFilename = path;
                        configFileTextField.setText(path);
                        newFile = false;
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    break;
                } else {
                    JOptionPane.showMessageDialog(fileChooser, 
                            path + "\nFile not found.\nCheck the filename and try again.", "Open", 
                            WARNING_MESSAGE);
                }
            } else {
                break;
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField configFileTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton loadRadioButton;
    private javax.swing.JRadioButton newRadioButton;
    // End of variables declaration//GEN-END:variables

    private void loadConfigFile(String path) throws FileNotFoundException {
        FileInputStream is = new FileInputStream(path);
        InputStreamReader reader = new InputStreamReader(is, StandardCharsets.UTF_8);
        GsonBuilder gsonBuilder = new GsonBuilder().setPrettyPrinting();
        gsonBuilder.registerTypeAdapter(LogicalImagerConfig.class, new LogicalImagerConfigDeserializer());
        Gson gson = gsonBuilder.create();
        try {
            config = gson.fromJson(reader, LogicalImagerConfig.class);
            //System.out.println(gson.toJson(config));
            //updatePanel(path, config);
        } catch (JsonParseException e) {
            System.err.println("Error parsing " + path + ". Reason= " + e.getMessage());
        }
    }

    public LogicalImagerConfig getConfig() {
        return config;
    }

    public String getConfigFilename() {
        return configFilename;
    }

    public boolean isNewFile() {
        return newFile;
    }

    void setConfigFilename(String filename) {
        configFileTextField.setText(filename);
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
    }

    public boolean isPanelValid() {
        return (newFile || !configFileTextField.getText().isEmpty());
    }

    private static class MyDocumentListener implements DocumentListener {

        private final ConfigVisualPanel1 panel;
        
        public MyDocumentListener(ConfigVisualPanel1 aThis) {
            this.panel = aThis;
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            fireChange();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            fireChange();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            fireChange();
        }

        private void fireChange() {
            panel.firePropertyChange("UPDATE_UI", false, true);
        }
    }

}
